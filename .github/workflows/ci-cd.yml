name: CI/CD Pipeline

on:
  push:
    branches:
      - master
    paths:
      - 'Source/**'
      - 'Tests/**'
      - 'Scripts/**'
      - '.github/workflows/**'
      - 'exe/**'
      - 'Directory.Build.props'
  pull_request:
    branches:
      - master
    paths:
      - 'Source/**'
      - 'Tests/**'
      - 'Scripts/**'
      - '.github/workflows/**'
      - 'exe/**'
      - 'Directory.Build.props'
  release:
    types: [published] # Triggered when a release is published via GitHub Releases UI or gh CLI
  workflow_dispatch: # Allow manual triggering

# Required permissions for GitHub attestations and releases
permissions:
  contents: write  # Needed for creating releases
  packages: write  # Needed for uploading packages
  id-token: write  # Needed for attestations
  attestations: write  # Needed for attestations

jobs:
  # First: Build all standalone executables
  build-executables:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            rid: linux-x64
            archive_cmd: tar czf
            archive_ext: .tar.gz
          - os: windows-latest
            rid: win-x64
            archive_cmd: Compress-Archive -Path
            archive_ext: .zip
          - os: macos-latest
            rid: osx-x64
            archive_cmd: tar czf
            archive_ext: .tar.gz
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '10.0.x'
          dotnet-quality: 'preview'

      - name: Build Standalone Executables
        shell: bash
        run: |
          echo "Building standalone executables for ${{ matrix.rid }}..."

          # Make scripts executable (Unix-like systems)
          if [[ "${{ matrix.os }}" != "windows-latest" ]]; then
            chmod +x exe/*.cs
          fi

          # Create output directory
          mkdir -p artifacts/${{ matrix.rid }}

          # Discover all .cs files in exe/ directory (excluding installer.cs and test files)
          for script_path in exe/*.cs; do
            script=$(basename "$script_path" .cs)

            # Skip installer.cs (built separately) and test files
            if [[ "$script" == "installer" ]] || [[ "$script" == *.Tests ]]; then
              echo "Skipping $script (built separately or test file)"
              continue
            fi

            echo "Building $script for ${{ matrix.rid }}..."

            dotnet publish "exe/$script.cs" -c Release -r ${{ matrix.rid }} \
              --self-contained -p:PublishSingleFile=true \
              -o artifacts/${{ matrix.rid }}
          done

      - name: Create Archive (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          cd artifacts
          tar czf timewarp-utilities-${{ matrix.rid }}.tar.gz ${{ matrix.rid }}/*
          cd ..

      - name: Create Archive (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cd artifacts
          Compress-Archive -Path "${{ matrix.rid }}/*" -DestinationPath "timewarp-utilities-${{ matrix.rid }}.zip"
          cd ..

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: artifacts/timewarp-utilities-${{ matrix.rid }}${{ matrix.archive_ext }}

      - name: Upload Executables
        uses: actions/upload-artifact@v4
        with:
          name: Executables-${{ matrix.rid }}
          if-no-files-found: error
          path: |
            artifacts/timewarp-utilities-${{ matrix.rid }}${{ matrix.archive_ext }}

  # Second: Build the installer executable
  build-installer:
    needs: build-executables  # Ensure executables are built first
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            rid: linux-x64
          - os: windows-latest
            rid: win-x64
          - os: macos-latest
            rid: osx-x64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '10.0.x'
          dotnet-quality: 'preview'

      - name: Build TimeWarp.Amuru library first
        run: |
          echo "Building TimeWarp.Amuru library..."
          dotnet build Source/TimeWarp.Amuru/TimeWarp.Amuru.csproj -c Release

      - name: Build installer executable
        shell: bash
        run: |
          echo "Building installer for ${{ matrix.rid }}..."

          # Make installer.cs executable on Unix
          if [[ "${{ matrix.os }}" != "windows-latest" ]]; then
            chmod +x exe/installer.cs 2>/dev/null || true
          fi

          # Build self-contained installer
          dotnet publish exe/installer.cs -c Release -r ${{ matrix.rid }} \
            --self-contained -p:PublishSingleFile=true \
            -o artifacts/

      - name: Rename installer
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            mv artifacts/installer.exe artifacts/installer-${{ matrix.rid }}.exe
          else
            mv artifacts/installer artifacts/installer-${{ matrix.rid }}
          fi

      - name: Generate installer attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: artifacts/installer-${{ matrix.rid }}*

      - name: Upload installer
        uses: actions/upload-artifact@v4
        with:
          name: Installer-${{ matrix.rid }}
          if-no-files-found: error
          path: artifacts/installer-${{ matrix.rid }}*

  # Third: Build and publish NuGet packages
  build-and-publish:
    needs: [build-executables, build-installer]  # Depend on both executable builds
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for MinVer to read all tags

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '10.0.x'
          dotnet-quality: 'preview'

      - name: Make scripts executable
        run: |
          chmod +x Scripts/Build.cs
          chmod +x Scripts/Clean.cs
          chmod +x Tests/RunTests.cs
          find Tests/Integration -name "*.cs" -type f -exec chmod +x {} \;

      - name: Build and Test
        run: |
          echo "Building TimeWarp.Amuru..."
          dotnet build Source/TimeWarp.Amuru/TimeWarp.Amuru.csproj --configuration Release

          echo "Building TimeWarp.Ganda..."
          dotnet build Source/TimeWarp.Ganda/TimeWarp.Ganda.csproj --configuration Release

          echo "Packing TimeWarp.Amuru..."
          dotnet pack Source/TimeWarp.Amuru/TimeWarp.Amuru.csproj --configuration Release --no-build

          echo "Packing TimeWarp.Ganda..."
          dotnet pack Source/TimeWarp.Ganda/TimeWarp.Ganda.csproj --configuration Release --no-build

          echo "Running tests..."
          ./Tests/RunTests.cs

      - name: Check if version already published (Releases only)
        if: github.event_name == 'release'
        run: |
          VERSION=$(grep '<Version>' Directory.Build.props | sed 's/.*<Version>\(.*\)<\/Version>.*/\1/')

          echo "Checking if TimeWarp.Amuru $VERSION is already published on NuGet.org..."
          if dotnet package search TimeWarp.Amuru --exact-match --prerelease --source https://api.nuget.org/v3/index.json | grep -q "$VERSION"; then
            echo "⚠️ WARNING: TimeWarp.Amuru $VERSION is already published to NuGet.org"
            echo "❌ This version cannot be republished. Please increment the version in Directory.Build.props"
            exit 1
          else
            echo "✅ TimeWarp.Amuru $VERSION is not yet published on NuGet.org"
          fi


          echo "Checking if TimeWarp.Ganda $VERSION is already published on NuGet.org..."
          if dotnet package search TimeWarp.Ganda --exact-match --prerelease --source https://api.nuget.org/v3/index.json | grep -q "$VERSION"; then
            echo "⚠️ WARNING: TimeWarp.Ganda $VERSION is already published to NuGet.org"
            echo "❌ This version cannot be republished. Please increment the version in Directory.Build.props"
            exit 1
          else
            echo "✅ TimeWarp.Ganda $VERSION is not yet published on NuGet.org"
          fi

      - name: Publish to NuGet.org (Releases only)
        if: github.event_name == 'release'
        run: |
          VERSION=$(grep '<Version>' Directory.Build.props | sed 's/.*<Version>\(.*\)<\/Version>.*/\1/')

          echo "Publishing TimeWarp.Amuru $VERSION..."
          dotnet nuget push "Source/TimeWarp.Amuru/bin/Release/TimeWarp.Amuru.$VERSION.nupkg" \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate


          echo "Publishing TimeWarp.Ganda $VERSION..."
          dotnet nuget push "Source/TimeWarp.Ganda/bin/Release/TimeWarp.Ganda.$VERSION.nupkg" \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate
        env:
          DOTNET_NUGET_SIGNATURE_VERIFICATION: false

      - name: Upload NuGet Packages
        uses: actions/upload-artifact@v4
        with:
          name: Packages-${{ github.run_number }}
          if-no-files-found: error
          path: |
            Source/TimeWarp.Amuru/bin/Release/TimeWarp.Amuru.*.nupkg
            Source/TimeWarp.Ganda/bin/Release/TimeWarp.Ganda.*.nupkg

  # Fourth: Upload release assets (only on release)
  upload-release-assets:
    if: github.event_name == 'release'
    needs: [build-and-publish]
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Need write permission to upload release assets
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            Executables-*/*
            Installer-*/*
            Packages-*/*